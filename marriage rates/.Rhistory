incumb_un = as_factor(incumb_un),
recordctrl = as_factor(recordctrl),
recodemth = as_factor(recodemth),
state = as_factor(state),
city_name = as_factor(city_name),
county_name = as_factor(county_name),
mailballot = as_factor(mailballot)
)
glimpse(nlrb_representation_1961_1998)
nlrb_representation_1961_1998 <- read_dta("Documents/GitHub/nlrb_old_rcases/nlrb_representation_1961_1998.dta") %>%
mutate(
region = as_factor(region),
r_type = as_factor(r_type),
sic = as_factor(sic),  # Industry code (older version of NAICS)
unit = as_factor(unit),
elect_type = as_factor(elect_type),
fst_union = as_factor(fst_union),
won = as_factor(won),
sec_union = as_factor(sec_union),
hrngctrl = as_factor(hrngctrl),
thr_union = as_factor(thr_union),
ruling_obj = as_factor(ruling_obj),
elect_ctrl = as_factor(elect_ctrl),
req_review = as_factor(req_review),
meth_disp = as_factor(meth_disp),
participant = as_factor(participant),
incumb_un = as_factor(incumb_un),
recordctrl = as_factor(recordctrl),
recodemth = as_factor(recodemth),
state = as_factor(state),
city_name = as_factor(city_name),
county_name = as_factor(county_name),
mailballot = as_factor(mailballot)
)
glimpse(nlrb_representation_1961_1998)
df_old_mi <- nlrb_representation_1961_1998 %>%
filter(state == "MI")  # Filter for Michigan
df_old_mi_clean <- df_old_mi %>%
mutate(
union_won = ifelse(won == "Won",1,0),
Employer_Address_combined = address  # Standardize address name
) %>%
select(
R_Case_Number = docket,  # Case number
Employer_Name_best = company,  # Employer name
Employer_Address_combined,  # Combined address
City = city_name,  # City
State = state,  # State (already filtered)
Zip = zip,  # Zip code
NAICS_Code = sic,  # SIC is an older version of NAICS
Election_Target_Date = election_date,  # Election date
union_won,  # Dummy for union win
union_rep = fst_union,  # Winning union
county_name
)
View(df_old_mi_clean)
rm(list = ls())
library(readxl)
library(tidyverse)
library(bgi)
library(writexl)
library(stringr)
con <- make_connection()
# Function to clean company names
clean_company_name <- function(x) {
x <- tolower(x)
x <- str_replace_all(x, "[^[:alnum:]]", " ")
x <- str_replace_all(x, "\\s+", " ")
x <- str_trim(x)
return(x)
}
# Function to clean and standardize job categories
clean_job_category <- function(x) {
# Convert to lowercase and remove special characters
x <- tolower(x)
x <- str_replace_all(x, "[^[:alnum:]]", " ")
x <- str_replace_all(x, "\\s+", " ")
x <- str_trim(x)
# Standardize categories
x <- case_when(
str_detect(x, "exec|senior|sr") & str_detect(x, "official|mgr") ~ "Exec/Sr. Officials & Mgrs",
str_detect(x, "first|mid") & str_detect(x, "official|mgr") ~ "First/Mid Officials & Mgrs",
str_detect(x, "craft") ~ "Craft Workers",
str_detect(x, "laborer") ~ "Laborers & Helpers",
str_detect(x, "operative") ~ "Operatives",
str_detect(x, "professional") ~ "Professionals",
str_detect(x, "sales") ~ "Sales Workers",
str_detect(x, "service") ~ "Service Workers",
str_detect(x, "technician") ~ "Technicians",
str_detect(x, "admin|clerical|office") ~ "Administrative Support",
str_detect(x, "total") ~ "Total",
TRUE ~ x
)
return(x)
}
# Get the data
eeo_old <- query_table_sf(con, "outside_data", "eeo", "company_eeo") %>%
collect()
eeo_old2 <- query_table_sf(con, "outside_data", "eeo", "company_eeo_new") %>%
collect() %>%
rename(year = year.y) %>%
select(-year.x)
eeo_2016_2020 <- query_table_sf(con, "outside_data", "eeo", "company_eeo_2016_2020") %>%
collect()
# Clean company names in each dataset
eeo_old <- eeo_old %>%
mutate(clean_company = clean_company_name(company))
eeo_old2 <- eeo_old2 %>%
mutate(clean_company = clean_company_name(company))
# Clean job categories in each dataset
eeo_old <- eeo_old %>%
mutate(clean_job_category = clean_job_category(job_category))
eeo_old2 <- eeo_old2 %>%
mutate(clean_job_category = clean_job_category(job_category))
eeo_2016_2020 <- eeo_2016_2020 %>%
mutate(clean_job_category = clean_job_category(job_category))
eeo_old_2023 <- eeo_old2 %>%
filter(year == 2023)
# Print job category distributions after cleaning
cat("\nJob Category Distribution in eeo_old:\n")
print(table(eeo_old$clean_job_category))
cat("\nJob Category Distribution in eeo_old2:\n")
print(table(eeo_old2$clean_job_category))
cat("\nJob Category Distribution in eeo_2016_2020:\n")
print(table(eeo_2016_2020$clean_job_category))
# Get unique companies from each dataset
companies_old <- unique(eeo_old$clean_company)
companies_old2 <- unique(eeo_old2$clean_company)
companies_2016_2020 <- unique(eeo_2016_2020$clean_company)
companies_2016_2020_data_frame <- as.data.frame(companies_2016_2020)
# Find companies that exist in all datasets
common_companies <- intersect(intersect(companies_old, companies_old2), companies_2016_2020)
# Create clean panel for common companies
eeo_panel <- bind_rows(
eeo_old %>% filter(clean_company %in% common_companies),
eeo_old2 %>% filter(clean_company %in% common_companies),
eeo_2016_2020 %>% filter(clean_company %in% common_companies)
) %>%
select(clean_company, company, year, clean_job_category, job_category,
hispanic_male, black_male, asian_male, white_male, pi_male, native_male, two_plus_male,
hispanic_female, black_female, asian_female, white_female, pi_female, native_female, two_plus_female,
hispanic, black, asian, white, pi, native, two_plus,
male, female, total) %>%
filter(!is.na(year)) %>%  # Remove rows with NA years
arrange(clean_company, year, clean_job_category)
# Check for duplicates at company-year-job_category level
duplicates <- eeo_panel %>%
group_by(clean_company, year, clean_job_category) %>%
filter(n() > 1) %>%
ungroup()
if(nrow(duplicates) > 0) {
cat("\nFound", nrow(duplicates), "duplicate entries at company-year-job_category level\n")
cat("Number of unique company-year-job_category combinations with duplicates:",
nrow(distinct(duplicates, clean_company, year, clean_job_category)), "\n")
# For duplicates, keep the entry with the highest total employment
eeo_panel <- eeo_panel %>%
group_by(clean_company, year, clean_job_category) %>%
slice_max(total, n = 1) %>%
ungroup()
}
# Create a complete panel with all company-year combinations
all_years <- sort(unique(eeo_panel$year))  # Use unique years instead of min:max
all_companies <- unique(eeo_panel$clean_company)
all_job_categories <- unique(eeo_panel$clean_job_category)
complete_panel <- expand.grid(
clean_company = all_companies,
year = all_years,
clean_job_category = all_job_categories
) %>%
left_join(eeo_panel, by = c("clean_company", "year", "clean_job_category"))
# Check for missing data
missing_data <- complete_panel %>%
filter(is.na(total)) %>%
group_by(clean_company, year) %>%
summarise(missing_categories = n(), .groups = "drop")
if(nrow(missing_data) > 0) {
cat("\nFound missing data for some company-year combinations:\n")
print(head(missing_data))
}
# Save the clean panel
write_xlsx(complete_panel, "eeo_panel.xlsx")
# Print summary statistics
cat("\nPanel Summary Statistics:\n")
cat("Number of unique companies:", length(all_companies), "\n")
cat("Years in dataset:", paste(all_years, collapse = ", "), "\n")
cat("Number of job categories:", length(all_job_categories), "\n")
cat("Total number of observations:", nrow(complete_panel), "\n")
cat("Number of missing observations:", sum(is.na(complete_panel$total)), "\n")
# Print first few rows of the panel
print(head(complete_panel))
alphabet <- complete_panel %>%
filter(clean_company == "alphabet")
# Filter for relevant job categories
filtered_data <- complete_panel %>%
filter(clean_job_category %in% c("Exec/Sr. Officials & Mgrs",
"First/Mid Officials & Mgrs",
"Professionals"))
# Add diagnostic prints
cat("\nChecking data before calculation:\n")
print(summary(filtered_data %>% select(black, hispanic, total)))
# Compute weighted average Black-Hispanic share by year (collapsing across companies)
yearly_black_hisp_share <- filtered_data %>%
mutate(black_hispanic = black + hispanic) %>%
group_by(year) %>%
summarize(
total_black_hispanic = sum(black_hispanic, na.rm = TRUE),
total_employees = sum(total, na.rm = TRUE),
weighted_black_hisp_share = total_black_hispanic / total_employees,  # Simple ratio of totals
.groups = 'drop'
)
# Print diagnostic information
cat("\nYearly summary:\n")
print(yearly_black_hisp_share)
# Get list of companies in alphabetical order for the note
companies_list <- sort(unique(filtered_data$company))  # Use original company names instead of clean_company
companies_note <- paste("Companies included:", paste(companies_list, collapse = ", "))
companies_note_wrapped <- str_wrap(companies_note, width = 220)  # Adjust width as needed
# Create a more informative plot with corrected values
plot <- ggplot(yearly_black_hisp_share, aes(x = year, y = weighted_black_hisp_share)) +
geom_line(size = 1.2, color = "#2E86AB") +
geom_point(size = 3, color = "#2E86AB") +
theme_minimal() +
labs(
title = "Black and Hispanic Representation in Senior Roles",
subtitle = "Share of Black and Hispanic employees across Executives, Mid-Level Managers, and Professionals",
x = "Year",
y = "Share of Black and Hispanic Employees (%)",
caption = paste("Data source: EEO-1 Reports\n", companies_note_wrapped)
) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1),
limits = c(0.1, 0.16)) +  # Set y-axis limits from 0 to 20%
scale_x_continuous(breaks = yearly_black_hisp_share$year) +  # Show all years
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5, margin = margin(b = 10)),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "gray50", margin = margin(b = 20)),
axis.title = element_text(size = 12, margin = margin(t = 10)),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "gray90"),
plot.margin = margin(20, 40, 20, 20),
legend.position = "none",
plot.caption = element_text(size = 8, hjust = 0, color = "gray50", lineheight = 1.2)
) +
# Add a subtle background highlight for the line
geom_ribbon(aes(ymin = 0, ymax = weighted_black_hisp_share),
fill = "#2E86AB",
alpha = 0.1)
# Add BGI logo with proper positioning
plot <- add_bgi_logo(plot)
print(plot)
library(tidyverse)
library(scales)
library(ipumsr)
setwd("~/Desktop/having fun acs/marriage rates")
## We have ACS data for 2000 - 2023.
## We are going to generate 5 year birth cohorts and investigate marriage rates by age by
## cohorts.
acs <- read_ipums_micro(
ddi = "acs.xml",
data = "acs.dat"
) %>%
rename_with(tolower) %>%
select(year,perwt,age,marst) %>%
filter(age >= 18) %>% ## censor ages past 65 as just 65+
mutate(age = if_else(age > 65, 65, age)) %>%
mutate(birth_year = year - age) %>% ## we have ACS samples for 2000 - 2023, lets generate 5 year birth cohorts
mutate(birth_cohort = case_when(
birth_year >= 1920 & birth_year <= 1924 ~ "1920-1924",
birth_year >= 1925 & birth_year <= 1929 ~ "1925-1929",
birth_year >= 1930 & birth_year <= 1934 ~ "1930-1934",
birth_year >= 1935 & birth_year <= 1939 ~ "1935-1939",
birth_year >= 1940 & birth_year <= 1944 ~ "1940-1944",
birth_year >= 1945 & birth_year <= 1949 ~ "1945-1949",
birth_year >= 1950 & birth_year <= 1954 ~ "1950-1954",
birth_year >= 1955 & birth_year <= 1959 ~ "1955-1959",
birth_year >= 1960 & birth_year <= 1964 ~ "1960-1964",
birth_year >= 1965 & birth_year <= 1969 ~ "1965-1969",
birth_year >= 1970 & birth_year <= 1974 ~ "1970-1974",
birth_year >= 1975 & birth_year <= 1979 ~ "1975-1979",
birth_year >= 1980 & birth_year <= 1984 ~ "1980-1984",
birth_year >= 1985 & birth_year <= 1989 ~ "1985-1989",
birth_year >= 1990 & birth_year <= 1994 ~ "1990-1994",
birth_year >= 1995 & birth_year <= 1999 ~ "1995-1999",
birth_year >= 2000 & birth_year <= 2004 ~ "2000-2004",
birth_year >= 2005 & birth_year <= 2009 ~ "2005-2009",
))
library(tidyverse)
library(scales)
library(ipumsr)
library(officer)
setwd("~/Desktop/having fun acs/marriage rates")
## We have ACS data for 2000 - 2023.
## We are going to generate 5 year birth cohorts and investigate marriage rates by age by
## cohorts.
acs <- read_ipums_micro(
ddi = "acs.xml",
data = "acs.dat"
) %>%
rename_with(tolower) %>%
select(year,perwt,age,marst) %>%
filter(age >= 18) %>% ## censor ages past 65 as just 65+
mutate(age = if_else(age > 65, 65, age)) %>%
mutate(birth_year = year - age) %>% ## we have ACS samples for 2000 - 2023, lets generate 5 year birth cohorts
mutate(birth_cohort = case_when(
birth_year >= 1920 & birth_year <= 1924 ~ "1920-1924",
birth_year >= 1925 & birth_year <= 1929 ~ "1925-1929",
birth_year >= 1930 & birth_year <= 1934 ~ "1930-1934",
birth_year >= 1935 & birth_year <= 1939 ~ "1935-1939",
birth_year >= 1940 & birth_year <= 1944 ~ "1940-1944",
birth_year >= 1945 & birth_year <= 1949 ~ "1945-1949",
birth_year >= 1950 & birth_year <= 1954 ~ "1950-1954",
birth_year >= 1955 & birth_year <= 1959 ~ "1955-1959",
birth_year >= 1960 & birth_year <= 1964 ~ "1960-1964",
birth_year >= 1965 & birth_year <= 1969 ~ "1965-1969",
birth_year >= 1970 & birth_year <= 1974 ~ "1970-1974",
birth_year >= 1975 & birth_year <= 1979 ~ "1975-1979",
birth_year >= 1980 & birth_year <= 1984 ~ "1980-1984",
birth_year >= 1985 & birth_year <= 1989 ~ "1985-1989",
birth_year >= 1990 & birth_year <= 1994 ~ "1990-1994",
birth_year >= 1995 & birth_year <= 1999 ~ "1995-1999",
birth_year >= 2000 & birth_year <= 2004 ~ "2000-2004",
birth_year >= 2005 & birth_year <= 2009 ~ "2005-2009",
))
acs_weighted <- acs %>%
mutate(marst = as_factor(marst)) %>%
mutate(ever_married = case_when(
marst == "Married, spouse present" ~ 1,
marst == "Married, spouse absent" ~ 1,
marst == "Separated" ~ 1,
marst == "Divorced" ~ 1,
marst == "Widowed" ~ 1,
TRUE ~ 0
)) %>%
group_by(birth_cohort,age,ever_married,year) %>%
summarise(weighted_obs = sum(perwt)) %>% ## drop any missing values
drop_na()
marriage_rates <- acs_weighted %>%
group_by(birth_cohort,age) %>%
summarise(total_obs = sum(weighted_obs),
married_obs = sum(weighted_obs[ever_married == 1])) %>%
mutate(marriage_rate = married_obs / total_obs)
### lets grab the most recent 10 cohorts
recent_cohorts <- marriage_rates %>%
select(birth_cohort) %>%
distinct() %>%
arrange(desc(birth_cohort)) %>%
head(10) %>%
pull(birth_cohort)
marriage_rates_filtered <- marriage_rates %>%
filter(birth_cohort %in% recent_cohorts)
# Register Verdana font for use in ggplot2
font_add("Verdana", regular = "/Library/Fonts/Verdana.ttf")
library(showtext)
library(tidyverse)
library(scales)
library(ipumsr)
library(officer)
library(showtext)
setwd("~/Desktop/having fun acs/marriage rates")
## We have ACS data for 2000 - 2023.
## We are going to generate 5 year birth cohorts and investigate marriage rates by age by
## cohorts.
acs <- read_ipums_micro(
ddi = "acs.xml",
data = "acs.dat"
) %>%
rename_with(tolower) %>%
select(year,perwt,age,marst) %>%
filter(age >= 18) %>% ## censor ages past 65 as just 65+
mutate(age = if_else(age > 65, 65, age)) %>%
mutate(birth_year = year - age) %>% ## we have ACS samples for 2000 - 2023, lets generate 5 year birth cohorts
mutate(birth_cohort = case_when(
birth_year >= 1920 & birth_year <= 1924 ~ "1920-1924",
birth_year >= 1925 & birth_year <= 1929 ~ "1925-1929",
birth_year >= 1930 & birth_year <= 1934 ~ "1930-1934",
birth_year >= 1935 & birth_year <= 1939 ~ "1935-1939",
birth_year >= 1940 & birth_year <= 1944 ~ "1940-1944",
birth_year >= 1945 & birth_year <= 1949 ~ "1945-1949",
birth_year >= 1950 & birth_year <= 1954 ~ "1950-1954",
birth_year >= 1955 & birth_year <= 1959 ~ "1955-1959",
birth_year >= 1960 & birth_year <= 1964 ~ "1960-1964",
birth_year >= 1965 & birth_year <= 1969 ~ "1965-1969",
birth_year >= 1970 & birth_year <= 1974 ~ "1970-1974",
birth_year >= 1975 & birth_year <= 1979 ~ "1975-1979",
birth_year >= 1980 & birth_year <= 1984 ~ "1980-1984",
birth_year >= 1985 & birth_year <= 1989 ~ "1985-1989",
birth_year >= 1990 & birth_year <= 1994 ~ "1990-1994",
birth_year >= 1995 & birth_year <= 1999 ~ "1995-1999",
birth_year >= 2000 & birth_year <= 2004 ~ "2000-2004",
birth_year >= 2005 & birth_year <= 2009 ~ "2005-2009",
))
acs_weighted <- acs %>%
mutate(marst = as_factor(marst)) %>%
mutate(ever_married = case_when(
marst == "Married, spouse present" ~ 1,
marst == "Married, spouse absent" ~ 1,
marst == "Separated" ~ 1,
marst == "Divorced" ~ 1,
marst == "Widowed" ~ 1,
TRUE ~ 0
)) %>%
group_by(birth_cohort,age,ever_married,year) %>%
summarise(weighted_obs = sum(perwt)) %>% ## drop any missing values
drop_na()
marriage_rates <- acs_weighted %>%
group_by(birth_cohort,age) %>%
summarise(total_obs = sum(weighted_obs),
married_obs = sum(weighted_obs[ever_married == 1])) %>%
mutate(marriage_rate = married_obs / total_obs)
### lets grab the most recent 10 cohorts
recent_cohorts <- marriage_rates %>%
select(birth_cohort) %>%
distinct() %>%
arrange(desc(birth_cohort)) %>%
head(10) %>%
pull(birth_cohort)
marriage_rates_filtered <- marriage_rates %>%
filter(birth_cohort %in% recent_cohorts)
# Register Verdana font for use in ggplot2
font_add("Verdana", regular = "/Library/Fonts/Verdana.ttf")
showtext_auto()
# Assign BGI palette colors to cohorts in the correct order
bgi_palette <- c(
"#c22036", # red (darkest)
"#A44914", # orange (darkest)
"#C68C0A", # tan (darkest)
"#03497a", # blue (darkest)
"#2F2F32", # black (darkest)
"#d15868", # red (lighter)
"#e0732b", # orange (lighter)
"#FAB619", # tan (lighter)
"#4A71A0", # blue (lighter)
"#58585B"  # black (lighter)
)
# Ensure recent_cohorts is in the correct order (descending, as in your code)
cohort_colors <- setNames(bgi_palette[seq_along(recent_cohorts)], recent_cohorts)
# Professional-quality plot
p <- ggplot(marriage_rates_filtered, aes(x = age, y = marriage_rate, color = birth_cohort, group = birth_cohort)) +
geom_line(size = 1.2) +
scale_color_manual(name = "Birth Cohort", values = cohort_colors) +
scale_y_continuous(labels = scales::label_percent(accuracy = 0.1, big.mark = ",", decimal.mark = ".")) +
labs(
title = "Marriage Rate by Age and Birth Cohort",
x = "Age",
y = "Marriage Rate",
color = "Birth Cohort",
caption = "Source: BGI analysis of ACS data"
) +
theme_minimal(base_size = 18, base_family = "Verdana") +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, family = "Verdana"),
axis.title.y = element_text(angle = 0, vjust = 0.5, hjust = 0.5, family = "Verdana"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(), # Only horizontal grid lines
panel.grid.major.y = element_line(linetype = "dotted"),
legend.position = "right",
plot.caption = element_text(size = 10, colour = "grey50", hjust = 1, family = "Verdana"),
text = element_text(family = "Verdana")
)
# Print to RStudio Plots window
print(p)
# Export as PNG (white background)
ggsave("marriage_rate_by_age_cohort.png", p, width = 9, height = 5, dpi = 150, bg = "white")
# Export as SVG
ggsave("marriage_rate_by_age_cohort.svg", p, width = 9, height = 5, bg = "white")
# ── 1. Paths -----------------------------------------------------------------
template_path <- file.path(
Sys.getenv("HOME"),
"Library/Group Containers/UBF8T346G9.Office/User Content.localized/Templates.localized",
"2025.04.28.BGI Template Updated.potx"
)
out_path <- "marriage_rates_deck.pptx"
svg_path <- "marriage_rate_by_age_cohort.svg"
png_path <- "marriage_rate_by_age_cohort.png"
img_path <- if (file.exists(svg_path)) svg_path else png_path   # SVG first, else PNG
# ── 2. Helper ----------------------------------------------------------------
safe_n_slides <- function(pptx) {
tryCatch(nrow(slide_summary(pptx)), error = function(e) 0)
}
# ── 3. Build deck ------------------------------------------------------------
ppt <- read_pptx(template_path)
# remove any demo slides the template might contain
if (safe_n_slides(ppt) > 0) {
while (safe_n_slides(ppt) > 0) ppt <- remove_slide(ppt, 1)
}
## ---- Slide 1 : Title -------------------------------------------------------
ppt <- add_slide(ppt, layout = "1_Title Slide", master = "Office Theme") |>
ph_with("Are Marriage Rates Declining, Or Simply Delaying",
location = ph_location_type("ctrTitle")) |>
ph_with("Tomer Stern",
location = ph_location_type("subTitle"))
## ---- Slide 2 : Chart + caption --------------------------------------------
ppt <- add_slide(ppt, layout = "Blank", master = "Office Theme")
# (a) plot image – edge‑to‑edge with 0.25‑inch margins
ppt <- ph_with(
ppt,
external_img(img_path, width = 9.5, height = 6),
location = ph_location(left = 0.25, top = 0.75, width = 9.5, height = 6)
)
# (b) caption
ppt <- ph_with(
ppt,
fpar(ftext("Seems like both", fp_text(font.size = 18))),
location = ph_location(left = 0.5, top = 7, width = 6, height = 0.5)
)
# ── 4. Save ------------------------------------------------------------------
print(ppt, target = out_path)
R.version$arch
file.edit("~/.Renviron")
my_connection <- function(
my_connection
file.edit("~/.Rprofile")
